{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform Certification: A Journey Journey Towards Learning Terraform and Certifying First off, the Terraform docs are well written. Much of this is from Moosa Khalid see the awesome class on ACoud Guru Another excellent course is on Udemy by Zeal Vora https://kplabs.in @zealvora The text Infrastructure as Code is also a great reference The Tao is the principles and foundation of all of the products in the HashiCorp stack I noticed that every part of the stack allows solving problems by changing the way work is done. Terraform, written in Go, is a single binary that provides the user magical powers. What is Infrastructure as Code What is Infrastructure as Code What are the benefits of Infrastructure as Code? What is immutable infrastructure and the benefits of this approach? Declarative vs Procedural Approaches Nice Summary - In many ways good configuration management principles and practices are a direct response to Click-Ops Procedural Paradigm imperative (examples as iterative) Declarative Paradigm (Here it is. Behold my deploy.yaml. This is what is to be) Cloud Agnosticism with Providers Enabling multi-cloud deployments is easy using Terraform The Terraform Workflow Init: Plan: Apply: Destroy: Validate (optional) Other Cool Features terraform fmt : format your code terraform graph terraform output: Display Outputs as created in output.tf terraform refresh refresh an object or terraform refresh Variables Declaration of variables in .tf files as well as gathered in terraform.tfvars as a best practice . Variables can have blank values {} for input and will require them or they'll error. Use the variable reserved word to create a variable block that has the following: variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" } Note that description, type and default are optional so For example, variable \"mystatus\" {} is valid Validattion Feature A superpower of terraform is the validation feature providing conditional validation of configuration code. In this example conditional validation of variable length being greater than 4. variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" validation { condition = length(var.my-status) > 4 error = \"There is an error in your status, my dude\" } } Use the sensitive config argument to indicate Variable Types and Constraints Base types: string, number and bool Complex Types: list, set, map, object, tuple EXAMPLE: Base Type: string variable \"os_name\" { type = string default = \"Arch\" description = \"BTW I run Arch\" } EXAMPLE: Base Type: List variable \"availability_zone_names\" { type = list(string) default = [\"us-east-2b\"] } EXAMPLE: Base Type: List variable \"docker_ports\" { type = list(object({ internal = number external = number protocol = string })) default = [ { internal = 8300 external = 8300 protocol = \"tcp\" } ] } Terraform Provisioners Best Practices include using them sparingly, opting instead for a hyperscaler service if available, when possible. Two types of Provisioners: Creation Time and Destroy Time provisioner. These can be set to run when a resource is being created or destroyed Use only when actions desired are not within Terraforms's declartive model. A Provisioner's state is not examined Only Zero return codes are valid. If a provisioner returns a non-zero return code , the resource is tainted Here's an example of a local-exec provisioner resource \"null_resource\" \"dummy_resource\" { provisioner \"local-exec\" { command = \"echo '0' > status.txt\" } provisioner \"local-exec\" { when = destroy command = \"echo '1' > status.txt\" } } Terraform State Critical for terraform operations. Without declarative state terraform doesn't work. It maps real resources to definitions in terraform code By default, state is dumped locally into terraform.tfstate but can be stored in object storage (e.g. s3 or GCS) Before any infrastructure is modified, terraform checks the existing state file is up to date with the existing infrastructure Resource dependency metatdata is tracked in the state-file. Dependencies for providers (subnet before ec2 launch is completely handled in terraform) The statefile also caches resource attributes, making it more performant and less chatty. So much of the data it will need and What does the terraform state command do? It is a utility for manipulating and managing the state of resources Advanced state management allows for manual removal of resources that will remove it from terraform management List out the tracked resources in terraform via terraform state list List out the tracked resources in terraform via terraform state show List out the tracked resources in terraform via terraform state rm $RESOURCE Local and Remote State and Storage Use AWS S3 or GCS bucket to persist state and allow for collaboration. Resource locking enable bby default with local state but not all backends support this so check. - terraform { required_providers { docker = { source = \"kreuzwerker/docker\" } } required_version = \">= 0.13\" backend \"s3\" { profile = \"demo\" region = \"us-east-1\" key = \"terraform.tfstate\" bucket = \"<AWS-S3-BUCKET-NAME-GOES-HERE>\" } } - One can also create the bucket using either terraform or the aws cli as follows: aws --profile tempprofile s3api create-bucket --bucket tfstate-persist-04-01-2022 Using Modules - Can be hosted or local. Use a hierarhical structure to organize e.g. providers/vpc Other Cool Features : Built-In Functions Pre-packaged built-in functions allow to transform and combine values The join function can be used to join together variables and resources Useful functions include: file function for inserting or manipulating files timestamp() will provide a UTC timestamp min(6,2,3,4) or max(82,88,19) to finnd the same To find if a string is contained within use contains([\"configparm1\",configparm2\", config3,625,23], \"config3\") This will return a boolean value of true or false Variable Type Constraints Variable Type Constraints control the type of variable values they are Primitive and Complex Primitive: includes single type value: number, string, bool (e.g. 15,\"Production\",True) Complex Type Constraints are: list, tuple, map, object These represent multiple types in a single variable Complex types can be further divided into two types of Constructors. The first is a Collection which allows multiple values of one primitive to be grouped together. Examples of these are list(type) map(type) set(type) Complex Type: Structural Variable Another Complex type: allows for multiple types (num,string,bool) in the variable value. Example could be as follows: ``` variable \"coach\" { type = object({ name = string hourly = number }) } Additional Tooling and Integrations HashiCorp Resources Exam Study Guide ( HashiCorp Learn Exam Review Guide ( HashiCorp Learn Exam Study Guide (HashiCorp Learn)","title":"Terraform Certs"},{"location":"#terraform-certification-a-journey","text":"","title":"Terraform Certification: A Journey"},{"location":"#journey-towards-learning-terraform-and-certifying","text":"First off, the Terraform docs are well written. Much of this is from Moosa Khalid see the awesome class on ACoud Guru Another excellent course is on Udemy by Zeal Vora https://kplabs.in @zealvora The text Infrastructure as Code is also a great reference The Tao is the principles and foundation of all of the products in the HashiCorp stack I noticed that every part of the stack allows solving problems by changing the way work is done. Terraform, written in Go, is a single binary that provides the user magical powers.","title":"Journey Towards Learning Terraform and Certifying"},{"location":"#what-is-infrastructure-as-code","text":"What is Infrastructure as Code What are the benefits of Infrastructure as Code? What is immutable infrastructure and the benefits of this approach?","title":"What is Infrastructure as Code"},{"location":"#declarative-vs-procedural-approaches","text":"Nice Summary - In many ways good configuration management principles and practices are a direct response to Click-Ops Procedural Paradigm imperative (examples as iterative) Declarative Paradigm (Here it is. Behold my deploy.yaml. This is what is to be)","title":"Declarative vs Procedural Approaches"},{"location":"#cloud-agnosticism-with-providers","text":"Enabling multi-cloud deployments is easy using Terraform","title":"Cloud Agnosticism with Providers"},{"location":"#the-terraform-workflow","text":"Init: Plan: Apply: Destroy: Validate (optional)","title":"The Terraform Workflow"},{"location":"#other-cool-features","text":"terraform fmt : format your code terraform graph terraform output: Display Outputs as created in output.tf terraform refresh refresh an object or terraform refresh","title":"Other Cool Features"},{"location":"#variables","text":"Declaration of variables in .tf files as well as gathered in terraform.tfvars as a best practice . Variables can have blank values {} for input and will require them or they'll error. Use the variable reserved word to create a variable block that has the following: variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" } Note that description, type and default are optional so For example, variable \"mystatus\" {} is valid","title":"Variables"},{"location":"#validattion-feature","text":"A superpower of terraform is the validation feature providing conditional validation of configuration code. In this example conditional validation of variable length being greater than 4. variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" validation { condition = length(var.my-status) > 4 error = \"There is an error in your status, my dude\" } } Use the sensitive config argument to indicate","title":"Validattion Feature"},{"location":"#variable-types-and-constraints","text":"Base types: string, number and bool Complex Types: list, set, map, object, tuple","title":"Variable Types and Constraints"},{"location":"#example-base-type-string","text":"variable \"os_name\" { type = string default = \"Arch\" description = \"BTW I run Arch\" }","title":"EXAMPLE: Base Type: string"},{"location":"#example-base-type-list","text":"variable \"availability_zone_names\" { type = list(string) default = [\"us-east-2b\"] }","title":"EXAMPLE: Base Type: List"},{"location":"#example-base-type-list_1","text":"variable \"docker_ports\" { type = list(object({ internal = number external = number protocol = string })) default = [ { internal = 8300 external = 8300 protocol = \"tcp\" } ] }","title":"EXAMPLE: Base Type: List"},{"location":"#terraform-provisioners","text":"Best Practices include using them sparingly, opting instead for a hyperscaler service if available, when possible. Two types of Provisioners: Creation Time and Destroy Time provisioner. These can be set to run when a resource is being created or destroyed Use only when actions desired are not within Terraforms's declartive model. A Provisioner's state is not examined Only Zero return codes are valid. If a provisioner returns a non-zero return code , the resource is tainted Here's an example of a local-exec provisioner resource \"null_resource\" \"dummy_resource\" { provisioner \"local-exec\" { command = \"echo '0' > status.txt\" } provisioner \"local-exec\" { when = destroy command = \"echo '1' > status.txt\" } }","title":"Terraform Provisioners"},{"location":"#terraform-state","text":"Critical for terraform operations. Without declarative state terraform doesn't work. It maps real resources to definitions in terraform code By default, state is dumped locally into terraform.tfstate but can be stored in object storage (e.g. s3 or GCS) Before any infrastructure is modified, terraform checks the existing state file is up to date with the existing infrastructure Resource dependency metatdata is tracked in the state-file. Dependencies for providers (subnet before ec2 launch is completely handled in terraform) The statefile also caches resource attributes, making it more performant and less chatty. So much of the data it will need and What does the terraform state command do? It is a utility for manipulating and managing the state of resources Advanced state management allows for manual removal of resources that will remove it from terraform management List out the tracked resources in terraform via terraform state list List out the tracked resources in terraform via terraform state show List out the tracked resources in terraform via terraform state rm $RESOURCE","title":"Terraform State"},{"location":"#local-and-remote-state-and-storage","text":"Use AWS S3 or GCS bucket to persist state and allow for collaboration. Resource locking enable bby default with local state but not all backends support this so check. - terraform { required_providers { docker = { source = \"kreuzwerker/docker\" } } required_version = \">= 0.13\" backend \"s3\" { profile = \"demo\" region = \"us-east-1\" key = \"terraform.tfstate\" bucket = \"<AWS-S3-BUCKET-NAME-GOES-HERE>\" } }","title":"Local and Remote State and Storage"},{"location":"#-one-can-also-create-the-bucket-using-either-terraform-or-the-aws-cli-as-follows-aws-profile-tempprofile-s3api-create-bucket-bucket-tfstate-persist-04-01-2022","text":"","title":"- One can also create the bucket using either terraform or the aws cli as follows: aws --profile tempprofile s3api create-bucket --bucket tfstate-persist-04-01-2022"},{"location":"#using-modules","text":"","title":"Using Modules"},{"location":"#-can-be-hosted-or-local-use-a-hierarhical-structure-to-organize-eg-providersvpc","text":"","title":"- Can be hosted or local. Use a hierarhical structure to organize e.g. providers/vpc"},{"location":"#other-cool-features-built-in-functions","text":"Pre-packaged built-in functions allow to transform and combine values The join function can be used to join together variables and resources Useful functions include: file function for inserting or manipulating files timestamp() will provide a UTC timestamp min(6,2,3,4) or max(82,88,19) to finnd the same To find if a string is contained within use contains([\"configparm1\",configparm2\", config3,625,23], \"config3\") This will return a boolean value of true or false","title":"Other Cool Features : Built-In Functions"},{"location":"#variable-type-constraints","text":"Variable Type Constraints control the type of variable values they are Primitive and Complex Primitive: includes single type value: number, string, bool (e.g. 15,\"Production\",True) Complex Type Constraints are: list, tuple, map, object These represent multiple types in a single variable Complex types can be further divided into two types of Constructors. The first is a Collection which allows multiple values of one primitive to be grouped together. Examples of these are list(type) map(type) set(type)","title":"Variable Type Constraints"},{"location":"#complex-type-structural-variable","text":"Another Complex type: allows for multiple types (num,string,bool) in the variable value. Example could be as follows: ``` variable \"coach\" { type = object({ name = string hourly = number }) }","title":"Complex Type: Structural Variable"},{"location":"#additional-tooling-and-integrations","text":"","title":"Additional Tooling and Integrations"},{"location":"#hashicorp-resources","text":"Exam Study Guide ( HashiCorp Learn Exam Review Guide ( HashiCorp Learn Exam Study Guide (HashiCorp Learn)","title":"HashiCorp Resources"}]}