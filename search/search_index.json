{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform Certification: A Journey Journey Towards Learning Terraform and Certifying First off, the Terraform docs are dope. - Terraform, written in Go, is a single binary that provides the user magical powers. What is Infrastructure as Code What is Infrastructure as Code What are the benefits of Infrastructure as Code? What is immutable infrastructure and the benefits of this approach? Declaritive vs Procedural Approaches _ Nice Summary Procedural Paradigm Declarative Paradigm Cloud Agnosticism with Providers The Terraform Workflow: A Virtuous Lifecycle Init: Plan: Apply Destroy Validate (optional) Other Cool Features terraform fmt : format your code terraform graph terraform output: Display Outputs as created in output.tf terraform refresh refresh an object or terraform refresh Variables Declaration of variables in .tf files as well as gathered in terraform.tfvars as a best practice . Variables can have blank values {} for input and will require them or they'll error. Use the variable reserved word to create a variable block that has the following: variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" } Note that description, type and default are optional so For example, `variable \"mystatus\" {} _ is valid Validattion Feature A superpower of terraform is the validation feature providing conditional validation of configuration code. In this example conditional validation of variable length being greater than 4. variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" validation { condition = length(var.my-status) > 4 error = \"There is an error in your status, my dude\" } } Use the sensitive config argument to indicate Variable Types and Constraints Base types: string, number and bool Complex Types: list, set, map, object, tuple EXAMPLE: Base Type: string variable \"os_name\" { type = string default = \"Arch\" } EXAMPLE: Base Type: List variable \"availability_zone_names\" { type = list(string) default = [\"us-east-2b\"] } EXAMPLE: Base Type: List ``` variable \"docker_ports\" { type = list(object({ internal = number external = number protocol = string })) default = [ { internal = 8300 external = 8300 protocol = \"tcp\" } ] } Additional Tooling and Integrations","title":"Terraform Certs"},{"location":"#terraform-certification-a-journey","text":"","title":"Terraform Certification: A Journey"},{"location":"#journey-towards-learning-terraform-and-certifying","text":"First off, the Terraform docs are dope.","title":"Journey Towards Learning Terraform and Certifying"},{"location":"#-terraform-written-in-go-is-a-single-binary-that-provides-the-user-magical-powers","text":"","title":"- Terraform, written in Go, is a single binary that provides the user magical powers."},{"location":"#what-is-infrastructure-as-code","text":"What is Infrastructure as Code What are the benefits of Infrastructure as Code? What is immutable infrastructure and the benefits of this approach?","title":"What is Infrastructure as Code"},{"location":"#declaritive-vs-procedural-approaches","text":"_ Nice Summary Procedural Paradigm Declarative Paradigm","title":"Declaritive vs Procedural Approaches"},{"location":"#cloud-agnosticism-with-providers","text":"","title":"Cloud Agnosticism with Providers"},{"location":"#the-terraform-workflow-a-virtuous-lifecycle","text":"Init: Plan: Apply Destroy Validate (optional)","title":"The Terraform Workflow: A Virtuous Lifecycle"},{"location":"#other-cool-features","text":"terraform fmt : format your code terraform graph terraform output: Display Outputs as created in output.tf terraform refresh refresh an object or terraform refresh","title":"Other Cool Features"},{"location":"#variables","text":"Declaration of variables in .tf files as well as gathered in terraform.tfvars as a best practice . Variables can have blank values {} for input and will require them or they'll error. Use the variable reserved word to create a variable block that has the following: variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" } Note that description, type and default are optional so For example, `variable \"mystatus\" {} _ is valid","title":"Variables"},{"location":"#validattion-feature","text":"A superpower of terraform is the validation feature providing conditional validation of configuration code. In this example conditional validation of variable length being greater than 4. variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" validation { condition = length(var.my-status) > 4 error = \"There is an error in your status, my dude\" } } Use the sensitive config argument to indicate","title":"Validattion Feature"},{"location":"#variable-types-and-constraints","text":"Base types: string, number and bool Complex Types: list, set, map, object, tuple","title":"Variable Types and Constraints"},{"location":"#example-base-type-string","text":"variable \"os_name\" { type = string default = \"Arch\" }","title":"EXAMPLE: Base Type: string"},{"location":"#example-base-type-list","text":"variable \"availability_zone_names\" { type = list(string) default = [\"us-east-2b\"] }","title":"EXAMPLE: Base Type: List"},{"location":"#example-base-type-list_1","text":"``` variable \"docker_ports\" { type = list(object({ internal = number external = number protocol = string })) default = [ { internal = 8300 external = 8300 protocol = \"tcp\" } ] }","title":"EXAMPLE: Base Type: List"},{"location":"#additional-tooling-and-integrations","text":"","title":"Additional Tooling and Integrations"}]}