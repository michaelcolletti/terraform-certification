{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform Certification: A Journey Journey Towards Learning Terraform and Certifying First off, the Terraform docs are dope. Much of this is from Moosa Khalid see the awesome class on ACoud Guru * Terraform, written in Go, is a single binary that provides the user magical powers. What is Infrastructure as Code What is Infrastructure as Code What are the benefits of Infrastructure as Code? What is immutable infrastructure and the benefits of this approach? Declarative vs Procedural Approaches Nice Summary Procedural Paradigm imperative (examples as iterative) Declarative Paradigm (Here it is. Behold my deploy.yaml. This is what is to be) Cloud Agnosticism with Providers The Terraform Workflow: A Virtuous Lifecycle Init: Plan: Apply Destroy Validate (optional) Other Cool Features terraform fmt : format your code terraform graph terraform output: Display Outputs as created in output.tf terraform refresh refresh an object or terraform refresh Variables Declaration of variables in .tf files as well as gathered in terraform.tfvars as a best practice . Variables can have blank values {} for input and will require them or they'll error. Use the variable reserved word to create a variable block that has the following: variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" } Note that description, type and default are optional so For example, `variable \"mystatus\" {} _ is valid Validattion Feature A superpower of terraform is the validation feature providing conditional validation of configuration code. In this example conditional validation of variable length being greater than 4. variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" validation { condition = length(var.my-status) > 4 error = \"There is an error in your status, my dude\" } } Use the sensitive config argument to indicate Variable Types and Constraints Base types: string, number and bool Complex Types: list, set, map, object, tuple EXAMPLE: Base Type: string variable \"os_name\" { type = string default = \"Arch\" } EXAMPLE: Base Type: List variable \"availability_zone_names\" { type = list(string) default = [\"us-east-2b\"] } EXAMPLE: Base Type: List variable \"docker_ports\" { type = list(object({ internal = number external = number protocol = string })) default = [ { internal = 8300 external = 8300 protocol = \"tcp\" } ] } Terraform Provisioners Best Practices include using them sparingly, opting instead for a hyperscaler service if available, when possible. Two types of Provisioners: Creation Time and Destroy Time provisioner. These can be set to run when a resource is being created or destroyed Use only when actions desired are not within Terraforms's declartive model. A Provisioner's state is not examined Only Zero return codes are valid. If a provisioner returns a non-zero return code , the resource is tainted Here's an example of a local-exec provisioner: ``` resource \"null_resource\" \"dummy_resource\" { provisioner \"local-exec\" { command = \"echo '0' > status.txt\" } provisioner \"local-exec\" { when = destroy command = \"echo '1' > status.txt\" } } ``` Additional Tooling and Integrations","title":"Terraform Certs"},{"location":"#terraform-certification-a-journey","text":"","title":"Terraform Certification: A Journey"},{"location":"#journey-towards-learning-terraform-and-certifying","text":"First off, the Terraform docs are dope. Much of this is from Moosa Khalid see the awesome class on ACoud Guru","title":"Journey Towards Learning Terraform and Certifying"},{"location":"#terraform-written-in-go-is-a-single-binary-that-provides-the-user-magical-powers","text":"","title":"* Terraform, written in Go, is a single binary that provides the user magical powers."},{"location":"#what-is-infrastructure-as-code","text":"What is Infrastructure as Code What are the benefits of Infrastructure as Code? What is immutable infrastructure and the benefits of this approach?","title":"What is Infrastructure as Code"},{"location":"#declarative-vs-procedural-approaches","text":"Nice Summary Procedural Paradigm imperative (examples as iterative) Declarative Paradigm (Here it is. Behold my deploy.yaml. This is what is to be)","title":"Declarative vs Procedural Approaches"},{"location":"#cloud-agnosticism-with-providers","text":"","title":"Cloud Agnosticism with Providers"},{"location":"#the-terraform-workflow-a-virtuous-lifecycle","text":"Init: Plan: Apply Destroy Validate (optional)","title":"The Terraform Workflow: A Virtuous Lifecycle"},{"location":"#other-cool-features","text":"terraform fmt : format your code terraform graph terraform output: Display Outputs as created in output.tf terraform refresh refresh an object or terraform refresh","title":"Other Cool Features"},{"location":"#variables","text":"Declaration of variables in .tf files as well as gathered in terraform.tfvars as a best practice . Variables can have blank values {} for input and will require them or they'll error. Use the variable reserved word to create a variable block that has the following: variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" } Note that description, type and default are optional so For example, `variable \"mystatus\" {} _ is valid","title":"Variables"},{"location":"#validattion-feature","text":"A superpower of terraform is the validation feature providing conditional validation of configuration code. In this example conditional validation of variable length being greater than 4. variable \"my-status\" { description = \"How I am\" type = string default = \"Fine\" validation { condition = length(var.my-status) > 4 error = \"There is an error in your status, my dude\" } } Use the sensitive config argument to indicate","title":"Validattion Feature"},{"location":"#variable-types-and-constraints","text":"Base types: string, number and bool Complex Types: list, set, map, object, tuple","title":"Variable Types and Constraints"},{"location":"#example-base-type-string","text":"variable \"os_name\" { type = string default = \"Arch\" }","title":"EXAMPLE: Base Type: string"},{"location":"#example-base-type-list","text":"variable \"availability_zone_names\" { type = list(string) default = [\"us-east-2b\"] }","title":"EXAMPLE: Base Type: List"},{"location":"#example-base-type-list_1","text":"variable \"docker_ports\" { type = list(object({ internal = number external = number protocol = string })) default = [ { internal = 8300 external = 8300 protocol = \"tcp\" } ] }","title":"EXAMPLE: Base Type: List"},{"location":"#terraform-provisioners","text":"Best Practices include using them sparingly, opting instead for a hyperscaler service if available, when possible. Two types of Provisioners: Creation Time and Destroy Time provisioner. These can be set to run when a resource is being created or destroyed Use only when actions desired are not within Terraforms's declartive model. A Provisioner's state is not examined Only Zero return codes are valid. If a provisioner returns a non-zero return code , the resource is tainted Here's an example of a local-exec provisioner: ``` resource \"null_resource\" \"dummy_resource\" { provisioner \"local-exec\" { command = \"echo '0' > status.txt\" } provisioner \"local-exec\" { when = destroy command = \"echo '1' > status.txt\" } } ```","title":"Terraform Provisioners"},{"location":"#additional-tooling-and-integrations","text":"","title":"Additional Tooling and Integrations"}]}